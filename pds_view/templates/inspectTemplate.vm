<?xml version="1.0" encoding="UTF-8" standalone="no"?>

<?xml-model href="https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1A00.sch"
  schematypens="http://purl.oclc.org/dsdl/schematron"?>

#macro( mapImage $object $dataFileOffset)
  #set ($type = "Array_2D_Image" )
  #set ( $value = $object.BANDS )
  #if ( $!{value} )
    #set ( $bands = $value )
##    #if ( $bands == 3 )
##      #set ( $type = "Array_3D_Image" )
##    #elseif ( $bands > 3 )
##      #set ( $type = "Array_3D_Spectrum" )
##    #end
  #end
  <$type>
  <local_identifier>$object_placeholder</local_identifier>
    <offset unit="byte">$dataFileOffset</offset>
    #if ( $type == "Array_2D_Image" )
    <axes>2</axes>
    #else
    <axes>3</axes>
    #end
    <axis_index_order>Last Index Fastest</axis_index_order>
    <Element_Array>
    #if ( $object.SAMPLE_TYPE == "MSB_INTEGER" or $object.SAMPLE_TYPE == "INTEGER" or $object.SAMPLE_TYPE == "SUN_INTEGER" or $object.SAMPLE_TYPE == "MAC_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>SignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>SignedMSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>SignedMSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "MSB_UNSIGNED_INTEGER" or $object.SAMPLE_TYPE == "SUN_UNSIGNED_INTEGER" or $object.SAMPLE_TYPE == "MAC_UNSIGNED_INTEGER" or $object.SAMPLE_TYPE == "UNSIGNED_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>UnsignedMSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>UnsignedMSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "LSB_INTEGER" or $object.SAMPLE_TYPE == "PC_INTEGER" or $object.SAMPLE_TYPE == "VAX_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>SignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>SignedLSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>SignedLSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "LSB_UNSIGNED_INTEGER" or $object.SAMPLE_TYPE == "PC_UNSIGNED_INTEGER" or $object.SAMPLE_TYPE == "VAX_UNSIGNED_INTEGER" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>UnsignedLSB2</data_type>
      #elseif ( $object.SAMPLE_BITS == "32" )
      <data_type>UnsignedLSB4</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "IEEE_REAL" or $object.SAMPLE_TYPE == "FLOAT" or $object.SAMPLE_TYPE == "REAL" or $object.SAMPLE_TYPE == "MAC_REAL" or $object.SAMPLE_TYPE == "SUN_REAL" or $object.SAMPLE_TYPE == "VAX_REAL" or $object.SAMPLE_TYPE == "VAXG_REAL" or $object.SAMPLE_TYPE == "VAX_DOUBLE")
      #if ( $object.SAMPLE_BITS == "4" )
      <data_type>IEEE754MSBSingle</data_type>
      #elseif ( $object.SAMPLE_BITS == "8" )
      <data_type>IEEE754MSBDouble</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "PC_REAL" )
      #if ( $object.SAMPLE_BITS == "4" )
      <data_type>IEEE754LSBSingle</data_type>
      #elseif ( $object.SAMPLE_BITS == "8" )
      <data_type>IEEE754LSBDouble</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "PC_COMPLEX" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>ComplexLSB8</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>ComplexLSB16</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "VAX_COMPLEX" or $object.SAMPLE_TYPE == "VAXG_COMPLEX" )
      #if ( $object.SAMPLE_BITS == "8" )
      <data_type>ComplexMSB8</data_type>
      #elseif ( $object.SAMPLE_BITS == "16" )
      <data_type>ComplexMSB16</data_type>
      #end
    #elseif ( $object.SAMPLE_TYPE == "MSB_BIT_STRING" or $object.SAMPLE_TYPE == "LSB_BIT_STRING" or $object.SAMPLE_TYPE == "VAX_BIT_STRING" )
      <data_type>UnsignedBitString</data_type>
    #end
    </Element_Array>
    #if ( $type == "Array_3D_Spectrum" or $type == "Array_3D_Image" )
    <Axis_Array>
      <axis_name>Band</axis_name>
      <elements>$bands</elements>
      <sequence_number>1</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Line</axis_name>
      <elements>$object.LINES</elements>
      <sequence_number>2</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Sample</axis_name>
      <elements>$object.LINE_SAMPLES</elements>
      <sequence_number>3</sequence_number>
    </Axis_Array>
    #else
    <Axis_Array>
      <axis_name>Line</axis_name>
      <elements>$object.LINES</elements>
      <sequence_number>1</sequence_number>
    </Axis_Array>
    <Axis_Array>
      <axis_name>Sample</axis_name>
      <elements>$object.LINE_SAMPLES</elements>
      <sequence_number>2</sequence_number>
    </Axis_Array>
    #end
  </$type>
#end
#macro( getDataType $column $fieldType $bytes)
  #if ( $fieldType == "Field_Binary") )
    #if ( $column.DATA_TYPE == "MSB_INTEGER" or $column.DATA_TYPE == "INTEGER" or $column.DATA_TYPE == "SUN_INTEGER" or $column.DATA_TYPE == "MAC_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>SignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>SignedMSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>SignedMSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>SignedMSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "MSB_UNSIGNED_INTEGER" or $column.DATA_TYPE == "SUN_UNSIGNED_INTEGER" or $column.DATA_TYPE == "MAC_UNSIGNED_INTEGER" or $column.DATA_TYPE == "UNSIGNED_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>UnsignedMSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>UnsignedMSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>UnsignedMSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "LSB_INTEGER" or $column.DATA_TYPE == "PC_INTEGER" or $column.DATA_TYPE == "VAX_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>SignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>SignedLSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>SignedLSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>SignedLSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "LSB_UNSIGNED_INTEGER" or $column.DATA_TYPE == "PC_UNSIGNED_INTEGER" or $column.DATA_TYPE == "VAX_UNSIGNED_INTEGER" )
      #if ( $bytes == "1" )
      <data_type>UnsignedByte</data_type>
      #elseif ( $bytes == "2" )
      <data_type>UnsignedLSB2</data_type>
      #elseif ( $bytes == "4" )
      <data_type>UnsignedLSB4</data_type>
      #elseif ( $bytes == "8" )
      <data_type>UnsignedLSB8</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "IEEE_REAL" or $column.DATA_TYPE == "FLOAT" or $column.DATA_TYPE == "REAL" or $column.DATA_TYPE == "MAC_REAL" or $column.DATA_TYPE == "SUN_REAL" or $column.DATA_TYPE == "VAX_REAL" or $column.DATA_TYPE == "VAXG_REAL" or $column.DATA_TYPE == "VAX_DOUBLE")
      #if ( $bytes == "4" )
      <data_type>IEEE754MSBSingle</data_type>
      #elseif ( $bytes == "8" )
      <data_type>IEEE754MSBDouble</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "PC_REAL" )
      #if ( $bytes == "4" )
      <data_type>IEEE754LSBSingle</data_type>
      #elseif ( $bytes == "8" )
      <data_type>IEEE754LSBDouble</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "PC_COMPLEX" )
      #if ( $bytes == "1" )
      <data_type>ComplexLSB8</data_type>
      #elseif ( $bytes == "2" )
      <data_type>ComplexLSB16</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "COMPLEX" or $column.DATA_TYPE == "MAC_COMPLEX" or $column.DATA_TYPE == "SUN_COMPLEX" or $column.DATA_TYPE == "VAX_COMPLEX" or $column.DATA_TYPE == "VAXG_COMPLEX" )
      #if ( $bytes == "1" )
      <data_type>ComplexMSB8</data_type>
      #elseif ( $bytes == "2" )
      <data_type>ComplexMSB16</data_type>
      #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
      #end
    #elseif ( $column.DATA_TYPE == "MSB_BIT_STRING" or $column.DATA_TYPE == "LSB_BIT_STRING" or $column.DATA_TYPE == "VAX_BIT_STRING" or $column.DATA_TYPE == "BCD" or $column.DATA_TYPE == "BINARY_CODED_DECIMAL" or $column.DATA_TYPE == "BINARY CODED DECIMAL")
      <data_type>SignedBitString</data_type>
    #elseif ( $column.DATA_TYPE == "CHARACTER" )
      <data_type>ASCII_String</data_type>
    #elseif ($column.DATA_TYPE == "TIME" )
      <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ($column.DATA_TYPE == "DATE" )
      <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ( $column.DATA_TYPE == "BOOLEAN" )
      <data_type>UnsignedByte</data_type>
    #else
      <data_type>Unknown</data_type>
      $log.severe("Could not map a $bytes byte, $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
    #end
  #else
    #if ( $column.DATA_TYPE == "MSB_BIT_STRING" or $column.DATA_TYPE == "LSB_BIT_STRING" or $column.DATA_TYPE == "VAX_BIT_STRING" )
    <data_type>SignedBitString</data_type>
    #elseif ( $column.DATA_TYPE == "CHARACTER" )
    <data_type>ASCII_String</data_type>
    #elseif ($column.DATA_TYPE == "TIME" )
    <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ($column.DATA_TYPE == "DATE" )
    <data_type>ASCII_Date_Time_YMD_UTC</data_type>
    #elseif ( $column.DATA_TYPE == "BOOLEAN" )
    <data_type>UnsignedByte</data_type>
    #elseif ( $column.DATA_TYPE == "ASCII_REAL" or $column.DATA_TYPE == "ASCII REAL")
    <data_type>ASCII_Real</data_type>
    #elseif ( $column.DATA_TYPE == "ASCII_INTEGER"or $column.DATA_TYPE == "ASCII INTEGER" or $column.DATA_TYPE == "INTEGER")
    <data_type>ASCII_Integer</data_type>
    #else
    <data_type>Unknown</data_type>
      $log.severe("Could not map a $column.DATA_TYPE type to its equivalent PDS4 type for column '$column.NAME.toString()'. Setting 'data_type' element to 'Unknown'.")
    #end
  #end
#end
#macro( mapColumn $column $fieldType $groupType)
  #set ( $items = false )
  #set ( $value = false )
  #set ($Integer = 0)
  #set ( $value = $column.ITEMS )
  #if ( $!{value} )
    #set( $items = $value )
  #else
    #set( $items = 0 )
  #end
  #if ( $items > 1 )
#*  <$groupType>
    <repetitions>$column.ITEMS</repetitions>
    <fields>1</fields>
    <groups>0</groups>
    <group_location unit="byte">$column.START_BYTE</group_location>
    <group_length unit="byte">$column.BYTES</group_length>
    <$fieldType>
      #set ( $bitColumns = false )
      #getBitColumns($column $fieldType $bitColumns)
      <name>$column.lower()</name>
      <field_location unit="byte">1</field_location>
      #if ( $!{bitColumns} and $bitColumns.size() > 0 )
      <data_type>UnsignedBitString</data_type>
      #else
        #getDataType ($column $fieldType $column.ITEM_BYTES)
      #end
      <field_length unit="byte">$column.ITEM_BYTES</field_length>
      #if ( $fieldType == "Field_Binary" )
        #if ( $!{bitColumns} )
      <Packed_Data_Fields>
        <bit_fields>$bitColumns.size()</bit_fields>
        #mapBitColumns($bitColumns $groupType)
      </Packed_Data_Fields>
        #else
          #set ( $bitColumns = [] )
        #end
      #end
    </$fieldType>
  </$groupType>      *#
  #else
  <$fieldType>
    #set ( $bitColumns = false )
##    #getBitColumns($column $fieldType $bitColumns)
    <name>$column.NAME.lower()</name>

##    <TEST_TEST_col_NAME>$column.size()</TEST_TEST_col_NAME>

    <field_location unit="byte">$column.START_BYTE</field_location>
## TODO: commented this out because I didn't see a macro for getBitColumns so this was always going
## to be false
##    #if ( $!{bitColumns} and $bitColumns.size() > 0 )
##    <data_type>UnsignedBitString</data_type>
##    #else
      #getDataType ($column $fieldType $column.BYTES)
##    #end
    <field_length unit="byte">$column.BYTES</field_length>
    #if ( $fieldType == "Field_Binary" )
      #if ( $!{bitColumns} )
        <Packed_Data_Fields>
        <bit_fields>$bitColumns.size()</bit_fields>
##        #mapBitColumns($bitColumns)
        </Packed_Data_Fields>
      #else
        #set ( $bitColumns = [] )
      #end
    #end
  </$fieldType>
  #end
#end
<Product_Observational xmlns="http://pds.nasa.gov/pds4/pds/v1"
    xmlns:pds="http://pds.nasa.gov/pds4/pds/v1"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xsi:schemaLocation="http://pds.nasa.gov/pds4/pds/v1 https://pds.nasa.gov/pds4/pds/v1/PDS4_PDS_1B00.xsd">
    <Identification_Area>
        #if ( $label.PRODUCT_ID )
<logical_identifier>urn:nasa:pds:data:$label.DATA_SET_ID.lower():$label.PRODUCT_ID.lower()</logical_identifier>
            #set ($title = $str($label.DATA_SET_ID.lower()) + " " + $str($label.PRODUCT_ID.lower()))
        #else
<logical_identifier>urn:nasa:pds:data:$label.DATA_SET_ID.lower().replace("/","-"):$generate.file_name.lower()</logical_identifier>
            #set ($title = $label.DATA_SET_ID.lower())
        #end
<version_id>1.0</version_id>
        #if ( $label.OBSERVATION_NAME )
<title>$label.OBSERVATION_NAME.lower()</title>
        #elseif ( $label.OBSERVATION_ID )
             <title>$label.OBSERVATION_ID.lower()</title>
        #elseif ( $label.PRODUCT_NAME )
             <title>$label.PRODUCT_NAME.lower()</title>
        #else
             <title>$title</title>
        #end
             <information_model_version>$generate.model_version</information_model_version>
             <product_class>Product_Observational</product_class>
             <Modification_History>
                 <Modification_Detail>
                     <modification_date>$generate.current_date_utc</modification_date>
                     <version_id>1.0</version_id>
                     <description>Auto generated PDS4 product label created by the Transform Tool.</description>
                 </Modification_Detail>
             </Modification_History>
    </Identification_Area>
    <Observation_Area>
        <Time_Coordinates>
            #if ( $label.START_TIME and not($label.START_TIME.strip()=='"N/A"' or $label.START_TIME.strip()=='"NULL"' or $label.START_TIME.strip()=='"UNK"') )
                #if ( $label.START_TIME.strip().endswith("Z") )
                      <start_date_time>${label.START_TIME}</start_date_time>
                #else
                      <start_date_time>${label.START_TIME}Z</start_date_time>
                #end
            #else
                 <start_date_time xsi:nil="true"></start_date_time>
            #end
            #if( $label.STOP_TIME and not($label.STOP_TIME.strip()=='"N/A"' or $label.STOP_TIME.strip()=='"NULL"' or $label.STOP_TIME.strip()=='"UNK"') )
                #if ( $label.STOP_TIME.trim().endswith("Z") )
                    <stop_date_time>${label.STOP_TIME}</stop_date_time>
                #else
                    <stop_date_time>${label.STOP_TIME}Z</stop_date_time>
                #end
            #else
                <stop_date_time xsi:nil="true"></stop_date_time>
            #end
        </Time_Coordinates>
        <Investigation_Area>
            #if ( $label.MISSION_NAME )
                 #set ( $missionName = $label.MISSION_NAME )
                 <name>$missionName.lower()</name>
                 <type>Mission</type>
                 <Internal_Reference>
                      <lid_reference>urn:nasa:pds:investigation.$missionName.lower().replace("\\s+", ".")</lid_reference>
                      <reference_type>data_to_investigation</reference_type>
                  </Internal_Reference>
            #elseif ( $label.MISSION_PHASE_NAME )
                #set ( $missionPhaseName = $label.MISSION_PHASE_NAME )
                <name>$missionPhaseName.lower()</name>
                <type>Mission</type>
                <Internal_Reference>
                    <lid_reference>urn:nasa:pds:investigation.$missionPhaseName.lower().replace("\\s+", ".")</lid_reference>
                    <reference_type>data_to_investigation</reference_type>
                </Internal_Reference>
            #end
        </Investigation_Area>
        <Observing_System>
            #if ( $label.INSTRUMENT_HOST_NAME )
                <Observing_System_Component>
                     <name>$label.INSTRUMENT_HOST_NAME.lower()</name>
                    <type>Spacecraft</type>
                </Observing_System_Component>
            #end
            #if ( $label.INSTRUMENT_NAME )
                 <Observing_System_Component>
                     <name>$label.INSTRUMENT_NAME.lower()</name>
                     <type>Instrument</type>
                 </Observing_System_Component>
            #elseif ( $label.INSTRUMENT_ID )
                 <Observing_System_Component>
                     <name>$label.INSTRUMENT_ID.lower()</name>
                     <type>Instrument</type>
                  </Observing_System_Component>
            #end
        </Observing_System>

        <Target_Identification>
        #if ( $label.TARGET_NAME )
            <name>$label.TARGET_NAME.lower()</name>
            <type>Planet</type>
        #end
        </Target_Identification>
    </Observation_Area>

    #set( $objectNames = $label.keys() )

    ## Support explicit FILE objects (PDS-539)
    ## #set ($filePtrObjectMap = {})
    ## createFilePtrToObjectMap($objectNames $label $filePtrObjectMap)
  
    ## Group the objects by data file name
    #set( $ptrObjectMap = $ptr_object_map )

    #set( $ptrOffsetMap = $ptr_offset_map )

    ## Support explicit FILE objects (PDS-539)
    ## #if ($filePtrObjectMap.size()>0)
    ##   #set ($ptrObjectMap = $filePtrObjectMap)
    ## #end

#foreach( $key in $ptrObjectMap.keys() )
    <File_Area_Observational>
        <File>
            <file_name>$key</file_name>
        </File>
        #set ( $objectNames = $ptrObjectMap[$key] )
        #set ( $dataFileOffsets = $ptrOffsetMap[$key] )
        #set ( $index =  -1 )
        #foreach( $objectName in $objectNames )
            #set( $index = $index + 1 )
            #set ( $object = $label[$objectName] )   ## returns a dictionary of all the table information
            #set( $dataFileOffset = $dataFileOffsets[$index] )
            #if ( $objectName == "IMAGE" )
                #mapImage($object $dataFileOffset)
            #elseif ( $objectName == "TABLE" or $objectName == "SERIES" )
                #if ( $object.INTERCHANGE_FORMAT == "ASCII" )
                    #set ( $tableType = "Table_Character" )
                #else
                    #set ( $tableType = "Table_Binary" )
                #end
                ## <TEST__TEST__TEST>$tableType</TEST__TEST__TEST>
            <$tableType>
                <local_identifier>$object_placeholder</local_identifier>
                <offset unit="byte">$dataFileOffset</offset>
                <records>$object.ROWS</records>
                #if ($tableType == "Table_Character")
                <record_delimiter>Carriage-Return Line-Feed</record_delimiter>
                    #set ($recordType = "Record_Character")
                    #set ($fieldType = "Field_Character")
                    #set ($groupType = "Group_Field_Character")
                #else
                    #set ($recordType = "Record_Binary")
                    #set ($fieldType = "Field_Binary")
                    #set ($groupType = "Group_Field_Binary")
                #end

                #set ($totalGroups = 0)
                #set ($totalColumns = 0)
                <$recordType>
 #*
                #set( $value = False )
                #set ( $value = $object.CONTAINER )
                ##<TEST_TEST>$object.CONTAINER</TEST_TEST>
                #if (  $!{value} )
                    ##<TEST_TEST>SHOULD NOT BE HERE</TEST_TEST>
                    #if ( $value.class.name.contains("List") )
                        #set ( $containers = $value )
                    #else
                        #set ( $containers = [$value] )
                    #end
                    #set( $Integer = 0 )
                    #set ( $totalGroups = $containers.size() + $totalGroups )
                #else
                    #set ( $containers = [] )
                #end
*#
                #set( $value = false )
                #set ( $value = $object.COLUMN )
                ## <TEST_TEST_object.COLUMN>$object.COLUMN.size()</TEST_TEST_object.COLUMN>
                #if ( $!{value} )


                    #if ( $value.size() > 1 )   ## if the size is greater than one, it's a list with more than one element
                        #set ( $columns = $value )
                        ##<TEST_TEST_cols>$columns</TEST_TEST_cols>
                    #else
                        #set ( $columns = [$value] )
                    #end
                #else
                     #set ( $columns = [] )
                #end

                ##<TEST_TEST_columns>$columns</TEST_TES_columns>
#*    TODO the foreach simply totals the number of Groups (ITEMS) and the number of COLUMN(s)  simply preproces pass in a map and make assignment
                #foreach ( $column in $columns )
                    ##<TEST_TEST_column_items>$column</TEST_TES_column_items>
                    #set ( $items = false )
                    #set ( $value = false )
                    #set ($Integer = 0)
                    #set ( $value = $column.ITEMS )
                    ##<TEST_TEST_column_items>$value</TEST_TES_column_items>
                    #if ( $!{value} )
                        #set( $items = $value )
                    #else
                        #set ( $items = 0 )
                    #end
                    #if ( $items > 1 )
                        #set( $Integer = 0 )
                        #set ( $totalGroups = $totalGroups + 1 )
                    #else
                        #set ($totalColumns = $totalColumns + 1)
                    #end
                #end
*#
                #set ($totalColumns = 3)
                <fields>$totalColumns</fields>
                #set ( $totalGroups = 0 )
                <groups>$totalGroups</groups>
                #set ( $rowBytes = 0 )
                #set ( $rowBytes = $object.ROW_BYTES )
                #if ( $object.ROW_PREFIX_BYTES )
                    #set ( $rowBytes = $object.ROW_PREFIX_BYTES + $rowBytes )
                #end
                #if ( $object.ROW_SUFFIX_BYTES )
                    #set ( $rowBytes = ($object.ROW_SUFFIX_BYTES + $rowBytes) )
                #end
                <record_length unit="byte">$rowBytes</record_length>

                #set ( $index = 0 )
                #set ( $childObjects = false)
                #set ( $value = false )
##                #set ( $value = $object.getChildObjects() )
#set ( $value = $object.COLUMN)
##<TEST_TEST_object_COLUMN>$value</TEST_TES_object_COLUMN>

                #if ( $!{value} )
##                    #if ( $value.class.name.contains("List") )
                        #set ( $childObjects = $value )
##                    #else
##                        #set ( $childObjects = $value )
##                    #end
                #else
                    #set ( $childObjects = [] )
                #end

                #foreach ( $childObject in $childObjects )
##<ASDASDASDASD>$childObject</ADSDSDFSDFSDF>
##                    #if ( $childObject.getName() == "COLUMN" )
                        #mapColumn($childObject, $fieldType, $groupType)
##                    #elseif ( $childObject.getName() == "CONTAINER") )
##  TODO DEFINE                        #mapContainer($childObject, $fieldType, $groupType)
##              #end
                #end
                </$recordType>
            </$tableType>
            #elseif ( $objectName == "SPREADSHEET") )
            <Table_Delimited>
                <offset unit="byte">$dataFileOffset</offset>
                <parsing_standard_id>PDS DSV 1</parsing_standard_id>
                <records>$object.ROWS</records>
                <record_delimiter>Carriage-Return Line-Feed</record_delimiter>
                #set ( $delimiter = false )
                #set( $value = false )
                #set ( $delimiter = $object.FIELD_DELIMITER )
                #if ( $!{delimiter} )
                    #set ( $delimiter = $delimiter.upper() )
                    #if ( $delimiter.equals("COMMA") )
                        #set ( $value = "Comma" )
                    #elseif ( $delimiter.equals("SEMICOLON") )
                        #set ( $value = "Semicolon" )
                    #elseif ( $delimiter.equals("TAB") )
                        #set ( $value = "Horizontal Tab" )
                    #elseif ( $delimiter.equals("VERTICAL_BAR") )
                        #set ( $value = "Vertical Bar" )
                    #else
                        #set ( $value = $delimiter )
                #end
            <field_delimiter>$value</field_delimiter>
            #end
        <Record_Delimited>
            <fields>$object.FIELDS</fields>
            <groups>0</groups>
        #set( $value = false )
        #set ( $value = $object.get("FIELD") )
        #if ( $!{value} )
            #if ( $value.class.name.contains("List") )
                #set ( $fields = $value )
            #else
                #set ( $fields = [$value] )
            #end
        #else
            #set ($fields = [] )
        #end
        #foreach ( $field in $fields )
            <TEST%%%%%%%%%%%%TEST>$field</TEST%%%%%%%%%%TEST>
            <Field_Delimited>
                <name>$field.NAME.lower()</name>
                #getDataType($field "Field_Delimited")
                <maximum_field_length unit="byte">$field.BYTES</maximum_field_length>
            </Field_Delimited>
        #end
        </Record_Delimited>
      </Table_Delimited>
      #end
    #end
  </File_Area_Observational>
  #end
</Product_Observational>